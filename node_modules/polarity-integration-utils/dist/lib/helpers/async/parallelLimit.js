"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const parallelLimit = (tasksQueue, simultaneousTaskRunningLimit, returnErrors = false) => __awaiter(void 0, void 0, void 0, function* () {
    const results = [];
    const runTasks = (tasksIterator) => __awaiter(void 0, void 0, void 0, function* () {
        for (const [index, task] of tasksIterator) {
            try {
                results[index] = yield task();
            }
            catch (error) {
                if (returnErrors)
                    results[index] = error;
                else
                    throw error;
            }
        }
    });
    const workers = new Array(simultaneousTaskRunningLimit)
        .fill(tasksQueue.entries())
        .map(runTasks);
    yield Promise.allSettled(workers);
    return results;
});
exports.default = parallelLimit;
