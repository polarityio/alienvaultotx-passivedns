"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fp_1 = require("lodash/fp");
const and_1 = __importDefault(require("./and"));
/**
 * Function to map over properties in an object.
 * This allows for transformations on both the keys and values of each properties.
 * This function also supports currying
 *
 * @param func - function that takes in `value` & `key' from each object property and
 *   returns a new key and new value in an array of length 2
 *   e.g. (value, key) => [newKey, newValue]
 * @param obj - JSON object which we wish to map over the properties of
 *   e.g. { key1: value1, key2: value2 }
 * @returns - JSON object with the transformed keys and values for each property
 *   e.g. { newKey1: newValue1, newKey2: newValue2 }
 */
const mapOverObject = (0, fp_1.curry)((func, obj) => obj && (0, fp_1.isPlainObject)(obj)
    ? (0, fp_1.flow)(Object.entries, (0, fp_1.map)(([key, value]) => func(value, key)), (0, fp_1.filter)((0, and_1.default)((0, fp_1.negate)(fp_1.isEmpty), (0, fp_1.flow)(fp_1.size, (0, fp_1.eq)(2)))), Object.fromEntries)(obj)
    : obj);
exports.default = mapOverObject;
